#include <iostream>
#include <set>
#include <map>
#include <list>
#include <queue>
#include <stack>
#include <cmath>
#include <string>
#include <vector>
#include <cstring>
#include <cstdio>
#include <utility>
#include <algorithm>
#include <functional>
using namespace std;
typedef long long ll;
typedef pair<int, int> P;
typedef vector<int> vi;

namespace graph_path {
	const int MAXM = 50020;
	const int MAXN = 10020;
	const int inf = 0x3f3f3f3f;
	int N;
	int d[MAXN];//distance
	int head[MAXN],cnt;
	bool vis[MAXN], cir[MAXN];//spfa vis:in queue,tarjan vis:in stack
	int qcnt[MAXN];//spfa in queue times 
	int dfn[MAXN], low[MAXN];//tarjan
	int tot,tp,all;//tarjan tot:dfn,tp:stack,all: number of connected component
	int stack[MAXN];//tarjan
	struct edge {
		int v, w, nxt;
	}E[MAXM];
	inline void init(int n) {
		cnt = 0;
		N = n;
		memset(head, -1, sizeof(head));
	}
	inline void addedge(int from, int to,int weight)
	{
		E[++cnt].nxt = head[from];
		E[cnt].v = to;
		E[cnt].w = weight;
		head[from] = cnt;
	}
	/**********************************   dij    **********************************/
	inline int dijkstra(int s,int t)
	{
		priority_queue<P> que;
		for (int i = 1; i <= N; i++)d[i] = inf;
		d[s] = 0;
		que.push(P(0, s)); //把起点推入队列
		while (!que.empty())
		{
			P p = que.top(); 
			que.pop();
			int now = p.second; //顶点的编号
			p.first = -p.first;
			if (d[now] < p.first) continue;
			for (int e = head[now]; e != -1; e = E[e].nxt)
			{
				int nx = E[e].v;
				int cost = E[e].w;
				if (d[nx] > d[now] + cost)
				{
					d[nx] = d[now] + cost;
					que.push(make_pair(-d[nx], nx));
				}
			}
		}
		return d[t];
	}
	/**********************************   spfa   **********************************/
	inline void dfs(int now)//get circle
	{
		cir[now] = true;
		for (int e = head[now]; e != -1; e = E[e].nxt)
			if (!cir[E[e].v])
				dfs(E[e].v);
	}
	inline int spfa(int s,int t)
	{
		memset(vis, 0, sizeof(vis));
		memset(qcnt, 0, sizeof(qcnt));
		memset(cir, 0, sizeof(cir));
		memset(d, inf, sizeof(d));
		//for (int i = 1; i <= N; i++)dist[i] = inf;
		vis[s] = true;
		d[s] = 0;
		queue<int>que;
		while (!que.empty())que.pop();
		que.push(s);
		qcnt[s] = 1;
		while (!que.empty())
		{
			int u = que.front();
			que.pop();
			vis[u] = false;
			for (int e = head[u]; e != -1; e = E[e].nxt)
			{
				int nx = E[e].v;
				int cost = E[e].w;
				if (cir[nx])continue;
				if (d[nx] > d[u] + cost)
				{
					d[nx] = d[u] + cost;
					if (!vis[nx])
					{
						vis[nx] = true;
						que.push(nx);
						qcnt[nx]++;
						if (qcnt[nx] > N && !cir[nx])
							dfs(nx);
					}
				}
			}
		}
		if (cir[t])return -1;
		else if (d[t] == inf)return -2;
		else return d[t];
	}
	/**********************************  tarjan  **********************************/
	inline void tarjan(int x)//代表第几个点在处理。递归的是点。
	{
		dfn[x] = low[x] = ++tot;// 新进点的初始化。
		stack[++tp] = x;//进站
		vis[x] = 1;//表示在栈里
		for (int i = head[x]; i != -1; i = E[i].nxt)
		{
			if (!dfn[E[i].v]) {//如果没访问过
				tarjan(E[i].v);//往下进行延伸，开始递归
				low[x] = min(low[x], low[E[i].v]);//递归出来，比较谁是谁的儿子／父亲，就是树的对应关系，涉及到强连通分量子树最小根的事情。
			}
			else if (vis[E[i].v]) {  //如果访问过，并且还在栈里。
				low[x] = min(low[x], dfn[E[i].v]);//比较谁是谁的儿子／父亲。就是链接对应关系
			}
		}
		if (low[x] == dfn[x]) //发现是整个强连通分量子树里的最小根。
		{
			all++;
			do {
				//printf("%d ", stack[tp]);
				vis[stack[tp]] = 0;
				tp--;
			} while (x != stack[tp + 1]);//出栈，并且输出。
			//printf("\n");
		}
		return;
	}
	inline void Tarjan() {
		all = 0;
		for (int i = 1; i <= N; i++)
			if (!dfn[i])  tarjan(i);//当这个点没有访问过，就从此点开始。防止图没走完
	}
}
